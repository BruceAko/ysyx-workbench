// Generated by CIRCT firtool-1.38.0
// Standard header to adapt well known macros to our needs.
`ifndef RANDOMIZE
  `ifdef RANDOMIZE_REG_INIT
    `define RANDOMIZE
  `endif // RANDOMIZE_REG_INIT
`endif // not def RANDOMIZE

// RANDOM may be set to an expression that produces a 32-bit random unsigned value.
`ifndef RANDOM
  `define RANDOM $random
`endif // not def RANDOM

// Users can define INIT_RANDOM as general code that gets injected into the
// initializer block for modules with registers.
`ifndef INIT_RANDOM
  `define INIT_RANDOM
`endif // not def INIT_RANDOM

// If using random initialization, you can also define RANDOMIZE_DELAY to
// customize the delay used, otherwise 0.002 is used.
`ifndef RANDOMIZE_DELAY
  `define RANDOMIZE_DELAY 0.002
`endif // not def RANDOMIZE_DELAY

// Define INIT_RANDOM_PROLOG_ for use in our modules below.
`ifndef INIT_RANDOM_PROLOG_
  `ifdef RANDOMIZE
    `ifdef VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM
    `else  // VERILATOR
      `define INIT_RANDOM_PROLOG_ `INIT_RANDOM #`RANDOMIZE_DELAY begin end
    `endif // VERILATOR
  `else  // RANDOMIZE
    `define INIT_RANDOM_PROLOG_
  `endif // RANDOMIZE
`endif // not def INIT_RANDOM_PROLOG_

module LSFR(	// <stdin>:3:10
  input        clock,	// <stdin>:4:11
               reset,	// <stdin>:5:11
               io_start,	// playground/src/LFSR.scala:5:14
  input  [7:0] io_seed,	// playground/src/LFSR.scala:5:14
  output [7:0] io_out	// playground/src/LFSR.scala:5:14
);

  reg [7:0] cnt;	// playground/src/LFSR.scala:11:31
  reg       start_reg;	// playground/src/LFSR.scala:12:31
  always @(posedge clock) begin	// <stdin>:4:11
    if (reset) begin	// <stdin>:4:11
      cnt <= 8'h0;	// playground/src/LFSR.scala:11:31
      start_reg <= 1'h0;	// playground/src/LFSR.scala:12:31
    end
    else begin	// <stdin>:4:11
      if (io_start & ~start_reg)	// playground/src/LFSR.scala:12:31, :16:{30,32}
        cnt <= io_seed;	// playground/src/LFSR.scala:11:31
      else if (start_reg)	// playground/src/LFSR.scala:12:31
        cnt <= {cnt[4] ^ cnt[3] ^ cnt[2] ^ cnt[0], cnt[7:1]};	// playground/src/LFSR.scala:11:31, :17:{24,33,42,46,51}, :23:{15,28}
      start_reg <= io_start;	// playground/src/LFSR.scala:12:31
    end
  end // always @(posedge)
  `ifndef SYNTHESIS	// <stdin>:3:10
    `ifdef FIRRTL_BEFORE_INITIAL	// <stdin>:3:10
      `FIRRTL_BEFORE_INITIAL	// <stdin>:3:10
    `endif // FIRRTL_BEFORE_INITIAL
    initial begin	// <stdin>:3:10
      automatic logic [31:0] _RANDOM_0;	// <stdin>:3:10
      `ifdef INIT_RANDOM_PROLOG_	// <stdin>:3:10
        `INIT_RANDOM_PROLOG_	// <stdin>:3:10
      `endif // INIT_RANDOM_PROLOG_
      `ifdef RANDOMIZE_REG_INIT	// <stdin>:3:10
        _RANDOM_0 = `RANDOM;	// <stdin>:3:10
        cnt = _RANDOM_0[7:0];	// playground/src/LFSR.scala:11:31
        start_reg = _RANDOM_0[8];	// playground/src/LFSR.scala:11:31, :12:31
      `endif // RANDOMIZE_REG_INIT
    end // initial
    `ifdef FIRRTL_AFTER_INITIAL	// <stdin>:3:10
      `FIRRTL_AFTER_INITIAL	// <stdin>:3:10
    `endif // FIRRTL_AFTER_INITIAL
  `endif // not def SYNTHESIS
  assign io_out = cnt;	// <stdin>:3:10, playground/src/LFSR.scala:11:31
endmodule

